"""
ChromaDB Product Database Manager
System for creating and managing product database with embeddings
"""

import os
import csv
import logging
import traceback
from typing import List, Dict, Any, Optional, Union
from pathlib import Path

# ChromaDB and embeddings
import chromadb
from chromadb.config import Settings
from sentence_transformers import SentenceTransformer

# Settings
from config.chromadb_settings import (
    EMBEDDING_MODEL, CHROMA_DB_DIR, CHROMA_SETTINGS,
    SEARCH_SETTINGS, TEXT_PROCESSING, VALIDATION,
    PRODUCT_CATEGORIES, FLORAL_CATEGORIES, ACCESSORY_CATEGORIES,
    get_csv_file, create_directories, get_category_type
)

class ChromaDBManager:
    """Manager for working with ChromaDB and embeddings"""
    
    def __init__(self):
        self.embedding_model = None
        self.chroma_client = None
        self.collections = {}
        self.logger = self._setup_logging()
        
        # Initialization
        create_directories()
        self._initialize_embedding_model()
        self._initialize_chroma_client()
        
    def _setup_logging(self):
        """Setup logging"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        )
        return logging.getLogger(__name__)
    
    def _initialize_embedding_model(self):
        """Initialize embedding model"""
        try:
            self.logger.info(f"Loading embedding model: {EMBEDDING_MODEL}")
            self.embedding_model = SentenceTransformer(EMBEDDING_MODEL)
            self.logger.info("‚úÖ Embedding model loaded")
        except Exception as e:
            self.logger.error(f"‚ùå Error loading embedding model: {e}")
            raise
    
    def _initialize_chroma_client(self):
        """Initialize ChromaDB client"""
        try:
            self.logger.info("Initializing ChromaDB client")
            self.chroma_client = chromadb.PersistentClient(
                path=str(CHROMA_DB_DIR),
                settings=Settings(anonymized_telemetry=False)
            )
            self.logger.info("‚úÖ ChromaDB client initialized")
        except Exception as e:
            self.logger.error(f"‚ùå Error initializing ChromaDB: {e}")
            raise
    
    def create_embedding_function(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è ChromaDB"""
        class SentenceTransformerEmbedding:
            def __init__(self, model):
                self.model = model
            
            def __call__(self, input):
                if isinstance(input, str):
                    input = [input]
                return self.model.encode(input).tolist()
            
            def name(self):
                return "sentence_transformers"
        
        return SentenceTransformerEmbedding(self.embedding_model)
    
    def get_or_create_collection(self, collection_name: str, recreate: bool = False):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é"""
        try:
            if recreate:
                try:
                    self.chroma_client.delete_collection(collection_name)
                    self.logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è: {collection_name}")
                except Exception:
                    pass
            
            collection = self.chroma_client.get_or_create_collection(
                name=collection_name,
                embedding_function=self.create_embedding_function(),
                metadata={"hnsw:space": CHROMA_SETTINGS["distance_metric"]}
            )
            
            self.collections[collection_name] = collection
            self.logger.info(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è –≥–æ—Ç–æ–≤–∞: {collection_name}")
            return collection
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {collection_name}: {e}")
            raise
    
    def prepare_product_text(self, product: Dict[str, Any]) -> str:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞"""
        text_parts = []
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        if product.get('primary_text'):
            text_parts.append(product['primary_text'])
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        if product.get('category'):
            text_parts.append(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product['category']}")
        
        # –¢–∏–ø —Ü–≤–µ—Ç–∫–∞
        if product.get('flower_type'):
            text_parts.append(f"–¢–∏–ø: {product['flower_type']}")
        
        # –¶–µ–Ω–∞
        if product.get('price'):
            text_parts.append(f"–¶–µ–Ω–∞: {product['price']} MDL")
        
        combined_text = " | ".join(text_parts)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        max_length = TEXT_PROCESSING["max_description_length"]
        if len(combined_text) > max_length:
            combined_text = combined_text[:max_length] + "..."
        
        return combined_text
    
    def validate_product(self, product: Dict[str, Any]) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
        required_columns = VALIDATION["required_columns"]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        for field in required_columns:
            if not product.get(field):
                return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã
        try:
            price = float(product.get('price', 0))
            if price < VALIDATION["min_price"] or price > VALIDATION["max_price"]:
                return False
        except (ValueError, TypeError):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if product.get('category') not in PRODUCT_CATEGORIES:
            return False
        
        return True
    
    def load_products_from_csv(self, csv_file_path: Optional[str] = None, recreate_collections: bool = False):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ CSV –≤ ChromaDB"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª
            if csv_file_path:
                csv_path = Path(csv_file_path)
            else:
                csv_path = get_csv_file()
            
            self.logger.info(f"üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞: {csv_path}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            flowers_collection = self.get_or_create_collection(
                CHROMA_SETTINGS["collection_name_flowers"], 
                recreate=recreate_collections
            )
            all_products_collection = self.get_or_create_collection(
                CHROMA_SETTINGS["collection_name_all"], 
                recreate=recreate_collections
            )
            
            # –°—á–µ—Ç—á–∏–∫–∏
            total_products = 0
            valid_products = 0
            floral_products = 0
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è batch –≤—Å—Ç–∞–≤–∫–∏
            batch_size = 100
            flowers_batch = {"ids": [], "documents": [], "metadatas": []}
            all_batch = {"ids": [], "documents": [], "metadatas": []}
            
            # –ß–∏—Ç–∞–µ–º CSV
            with open(csv_path, 'r', encoding='utf-8') as file:
                reader = csv.DictReader(file)
                
                for row in reader:
                    total_products += 1
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è
                    if not self.validate_product(row):
                        continue
                    
                    valid_products += 1
                    
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                    product_id = row['chunk_id']
                    product_text = self.prepare_product_text(row)
                    
                    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    metadata = {
                        'category': row['category'],
                        'price': float(row['price']),
                        'flower_type': row.get('flower_type', ''),
                        'url': row.get('url', ''),
                        'is_verified': row.get('is_verified', 'False').lower() == 'true',
                        'category_type': get_category_type(row['category'])
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
                    all_batch["ids"].append(product_id)
                    all_batch["documents"].append(product_text)
                    all_batch["metadatas"].append(metadata.copy())
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ü–≤–µ—Ç—ã –µ—Å–ª–∏ —Ñ–ª–æ—Ä–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                    if get_category_type(row['category']) == 'floral':
                        floral_products += 1
                        flowers_batch["ids"].append(product_id)
                        flowers_batch["documents"].append(product_text)
                        flowers_batch["metadatas"].append(metadata.copy())
                    
                    # Batch –≤—Å—Ç–∞–≤–∫–∞
                    if len(all_batch["ids"]) >= batch_size:
                        self._insert_batch(all_products_collection, all_batch, "all_products")
                        all_batch = {"ids": [], "documents": [], "metadatas": []}
                    
                    if len(flowers_batch["ids"]) >= batch_size:
                        self._insert_batch(flowers_collection, flowers_batch, "flowers")
                        flowers_batch = {"ids": [], "documents": [], "metadatas": []}
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è
            if all_batch["ids"]:
                self._insert_batch(all_products_collection, all_batch, "all_products")
            
            if flowers_batch["ids"]:
                self._insert_batch(flowers_collection, flowers_batch, "flowers")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
            self.logger.info(f"   üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {total_products}")
            self.logger.info(f"   ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {valid_products}")
            self.logger.info(f"   üå∏ –§–ª–æ—Ä–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {floral_products}")
            
            return {
                'success': True,
                'total_products': total_products,
                'valid_products': valid_products,
                'floral_products': floral_products
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
            traceback.print_exc()
            return {'success': False, 'error': str(e)}
    
    def _insert_batch(self, collection, batch_data, collection_type):
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç batch –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é"""
        try:
            collection.add(
                ids=batch_data["ids"],
                documents=batch_data["documents"],
                metadatas=batch_data["metadatas"]
            )
            self.logger.debug(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {len(batch_data['ids'])} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ {collection_type}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ batch –≤ {collection_type}: {e}")
            raise
    
    def search_products(self, query: str, collection_name: str, limit: int = 5, 
                       price_min: Optional[float] = None, price_max: Optional[float] = None,
                       category_filter: Optional[List[str]] = None) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
        try:
            if collection_name not in self.collections:
                collection = self.get_or_create_collection(collection_name)
            else:
                collection = self.collections[collection_name]
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            where_clause = {}
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Ü–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è ChromaDB
            if price_min is not None and price_max is not None:
                where_clause["$and"] = [
                    {"price": {"$gte": price_min}},
                    {"price": {"$lte": price_max}}
                ]
            elif price_min is not None:
                where_clause["price"] = {"$gte": price_min}
            elif price_max is not None:
                where_clause["price"] = {"$lte": price_max}
            
            if category_filter:
                where_clause["category"] = {"$in": category_filter}
            
            # –ü–æ–∏—Å–∫
            results = collection.query(
                query_texts=[query],
                n_results=min(limit, SEARCH_SETTINGS["max_limit"]),
                where=where_clause if where_clause else None
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            formatted_results = []
            if results['documents'] and results['documents'][0]:
                for i, doc in enumerate(results['documents'][0]):
                    metadata = results['metadatas'][0][i]
                    result = {
                        'id': results['ids'][0][i],
                        'name': doc,
                        'category': metadata.get('category', ''),
                        'price': metadata.get('price', 0),
                        'flower_type': metadata.get('flower_type', ''),
                        'url': metadata.get('url', ''),
                        'is_verified': metadata.get('is_verified', False),
                        'category_type': metadata.get('category_type', 'other'),
                        'distance': results['distances'][0][i] if results.get('distances') else 0
                    }
                    formatted_results.append(result)
            
            return formatted_results
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ {collection_name}: {e}")
            return []
    
    def get_collection_stats(self, collection_name: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
        try:
            if collection_name not in self.collections:
                collection = self.get_or_create_collection(collection_name)
            else:
                collection = self.collections[collection_name]
            
            count = collection.count()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            sample = collection.get(limit=min(count, 1000))
            
            categories = set()
            price_range = {'min': float('inf'), 'max': 0}
            
            if sample['metadatas']:
                for metadata in sample['metadatas']:
                    if metadata.get('category'):
                        categories.add(metadata['category'])
                    
                    price = metadata.get('price', 0)
                    if price > 0:
                        price_range['min'] = min(price_range['min'], price)
                        price_range['max'] = max(price_range['max'], price)
            
            if price_range['min'] == float('inf'):
                price_range['min'] = 0
            
            return {
                'collection_name': collection_name,
                'total_products': count,
                'categories': sorted(list(categories)),
                'categories_count': len(categories),
                'price_range': price_range
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {collection_name}: {e}")
            return {'error': str(e)}
    
    def get_all_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π"""
        try:
            flowers_stats = self.get_collection_stats(CHROMA_SETTINGS["collection_name_flowers"])
            all_stats = self.get_collection_stats(CHROMA_SETTINGS["collection_name_all"])
            
            return {
                'flowers_collection': flowers_stats,
                'all_products_collection': all_stats,
                'total_categories': len(PRODUCT_CATEGORIES),
                'floral_categories': len(FLORAL_CATEGORIES),
                'accessory_categories': len(ACCESSORY_CATEGORIES)
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'error': str(e)}

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
chroma_manager = ChromaDBManager()

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def initialize_database(csv_file_path: Optional[str] = None, recreate: bool = False):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    return chroma_manager.load_products_from_csv(csv_file_path, recreate)

def search_flowers(query: str, limit: int = 5, price_min: Optional[float] = None, 
                  price_max: Optional[float] = None):
    """–ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç–æ–≤"""
    return chroma_manager.search_products(
        query, CHROMA_SETTINGS["collection_name_flowers"], 
        limit, price_min, price_max, list(FLORAL_CATEGORIES)
    )

def search_all_products(query: str, limit: int = 5, price_min: Optional[float] = None,
                       price_max: Optional[float] = None):
    """–ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –ø—Ä–æ–¥—É–∫—Ç–∞–º"""
    return chroma_manager.search_products(
        query, CHROMA_SETTINGS["collection_name_all"], 
        limit, price_min, price_max
    )

def get_database_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    return chroma_manager.get_all_stats()

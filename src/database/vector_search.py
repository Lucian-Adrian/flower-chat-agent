"""
–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ XOFlowers
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –∫–∞–∫ –ø–æ —Ü–≤–µ—Ç–∞–º, —Ç–∞–∫ –∏ –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º
"""

import os
import csv
import chromadb
from sentence_transformers import SentenceTransformer

class UniversalXOFlowersSearch:
    def __init__(self):
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ChromaDB
        self.client = chromadb.PersistentClient(path="./chroma_db_flowers")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–æ–≤
        self.model = SentenceTransformer('all-MiniLM-L6-v2')
        
        # –°–æ–∑–¥–∞–µ–º –î–í–ï –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        try:
            # –ö–æ–ª–ª–µ–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ü–≤–µ—Ç–æ–≤
            self.flowers_collection = self.client.create_collection("flowers_only")
        except:
            self.flowers_collection = self.client.get_collection("flowers_only")
            
        try:
            # –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –í–°–ï–• —Ç–æ–≤–∞—Ä–æ–≤
            self.all_products_collection = self.client.create_collection("all_products")
        except:
            self.all_products_collection = self.client.get_collection("all_products")
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
        self.flower_categories = {
            "Author'S Bouquets", "Classic Bouquets", "French Roses",
            "Mono/Duo Bouquets", "Basket / Boxes With Flowers",
            "Bride'S Bouquet", "Premium", "Peonies",
            "Mourning Flower Arrangement", "St. Valentine'S Day"
        }
        
        self.non_flower_categories = {
            "Chando",  # –î–∏—Ñ—Ñ—É–∑–æ—Ä—ã
            "Soft Toys",  # –ò–≥—Ä—É—à–∫–∏
            "Greeting Card",  # –û—Ç–∫—Ä—ã—Ç–∫–∏
            "Additional Accessories / Vases",  # –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã
            "Sweets"  # –°–ª–∞–¥–æ—Å—Ç–∏
        }
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
        self.flower_keywords = {
            'ro': ['flori', 'buchet', 'trandafiri', 'bujori', 'nuntƒÉ', 'aniversare', 'cadou'],
            'en': ['flowers', 'bouquet', 'roses', 'peonies', 'wedding', 'birthday', 'gift'],
            'ru': ['—Ü–≤–µ—Ç—ã', '–±—É–∫–µ—Ç', '—Ä–æ–∑—ã', '–ø–∏–æ–Ω—ã', '—Å–≤–∞–¥—å–±–∞', '–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', '–ø–æ–¥–∞—Ä–æ–∫']
        }
        
        self.non_flower_keywords = {
            'ro': ['difuzor', 'aromƒÉ', 'jucƒÉrie', 'felicitare', 'dulciuri', 'ciocolatƒÉ'],
            'en': ['diffuser', 'aroma', 'toy', 'card', 'sweets', 'chocolate'],
            'ru': ['–¥–∏—Ñ—Ñ—É–∑–æ—Ä', '–∞—Ä–æ–º–∞—Ç', '–∏–≥—Ä—É—à–∫–∞', '–æ—Ç–∫—Ä—ã—Ç–∫–∞', '—Å–ª–∞–¥–æ—Å—Ç–∏', '—à–æ–∫–æ–ª–∞–¥']
        }
        
        print("‚úÖ Universal XOFlowers search system initialized")
    
    def load_products_from_csv(self, csv_filename="final_products_case_standardized.csv"):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –æ–±–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏"""
        csv_path = f"data/{csv_filename}"
        
        if not os.path.exists(csv_path):
            csv_path = "data/chunks_data.csv"
            if not os.path.exists(csv_path):
                print("‚ùå –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                return
            print(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {csv_path}")
        else:
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {csv_path}")
        
        all_products = []
        flower_products = []
        total_rows = 0
        valid_products = 0
        
        with open(csv_path, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            
            for row in reader:
                total_rows += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø—Ä–æ–¥—É–∫—Ç
                if row.get('chunk_type') != 'product':
                    continue
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã
                if not self._is_valid_product(row):
                    continue
                
                valid_products += 1
                category = row.get('category', '')
                
                # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
                product = self._create_product_object(row, valid_products)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï –≤–∞–ª–∏–¥–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –æ–±—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
                all_products.append(product)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç—ã –≤ —Ü–≤–µ—Ç–æ—á–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
                if category in self.flower_categories:
                    flower_product = product.copy()
                    flower_product['search_text'] = self._create_flower_search_text(row)
                    flower_product['is_flower'] = 'True'
                    flower_products.append(flower_product)
        
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {total_rows}")
        print(f"‚úÖ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(all_products)}")
        print(f"üå∏ –ò–∑ –Ω–∏—Ö —Ü–≤–µ—Ç–æ–≤: {len(flower_products)}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –æ–±–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        if all_products:
            self._add_products_to_collection(all_products, self.all_products_collection, "all_products")
        
        if flower_products:
            self._add_products_to_collection(flower_products, self.flowers_collection, "flowers_only")
    
    # –ú–µ—Ç–æ–¥—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
    def search(self, query, limit=5, only_verified=False, only_functional=False):
        """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
        return self.smart_search(query, limit)
    
    def get_categories(self):
        """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            all_results = self.all_products_collection.get()
            categories = set()
            
            if all_results['metadatas']:
                for metadata in all_results['metadatas']:
                    if metadata.get('category'):
                        categories.add(metadata['category'])
            
            return sorted(list(categories))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            return []

    def smart_search(self, query, limit=5, force_flowers_only=False, force_all_products=False, 
                    price_min=None, price_max=None, budget=None):
        """
        –£–ú–ù–´–ô –ø–æ–∏—Å–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ü–µ–Ω—ã
        
        Args:
            query: –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            limit: –º–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            force_flowers_only: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç—ã
            force_all_products: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º
            price_min: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
            price_max: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
            budget: –±—é–¥–∂–µ—Ç (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç price_max)
        """
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –±—é–¥–∂–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
        if budget and not price_max:
            price_max = budget
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —è–≤–Ω–æ
        if not price_min and not price_max and not budget:
            extracted_budget = self._extract_price_from_query(query)
            if extracted_budget:
                price_max = extracted_budget
                print(f"üí∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω –±—é–¥–∂–µ—Ç: {price_max} MDL")
        
        if force_flowers_only:
            return self.search_flowers_only(query, limit, price_min, price_max)
        elif force_all_products:
            return self.search_all_products(query, limit, price_min=price_min, price_max=price_max)
        else:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
            search_type = self._detect_search_type(query)
            
            if search_type == "flowers":
                print(f"üå∏ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –¶–í–ï–¢–ê–ú –¥–ª—è: '{query}'")
                return self.search_flowers_only(query, limit, price_min, price_max)
            elif search_type == "non_flowers":
                print(f"üéÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –í–°–ï–ú –¢–û–í–ê–†–ê–ú –¥–ª—è: '{query}'")
                return self.search_all_products(query, limit, price_min=price_min, price_max=price_max)
            else:
                # –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫
                print(f"üîç –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º —Ü–µ–Ω—ã –¥–ª—è: '{query}'")
                return self.combined_search(query, limit, price_min, price_max)
    
    def search_flowers_only(self, query, limit=5, price_min=None, price_max=None, verified_only=False):
        """–ü–æ–∏—Å–∫ –¢–û–õ–¨–ö–û –ø–æ —Ü–≤–µ—Ç–∞–º —Å —Ñ–∏–ª—å—Ç—Ä–æ–º —Ü–µ–Ω—ã"""
        try:
            where_conditions = {"is_flower": "True"}
            
            additional_filters = []
            if verified_only:
                additional_filters.append({"is_verified": "True"})
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —Ü–µ–Ω–µ
            if price_min is not None:
                additional_filters.append({"price": {"$gte": price_min}})
            if price_max is not None:
                additional_filters.append({"price": {"$lte": price_max}})
            
            if additional_filters:
                where_conditions = {
                    "$and": [where_conditions] + additional_filters
                }
            
            results = self.flowers_collection.query(
                query_texts=[query],
                n_results=limit,
                where=where_conditions
            )
            
            return self._format_results(results, "üå∏ –¶–í–ï–¢–´")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ü–≤–µ—Ç–æ–≤: {e}")
            return []
    
    def search_all_products(self, query, limit=5, category_filter=None, price_min=None, price_max=None):
        """–ü–æ–∏—Å–∫ –ø–æ –í–°–ï–ú —Ç–æ–≤–∞—Ä–∞–º —Å —Ñ–∏–ª—å—Ç—Ä–æ–º —Ü–µ–Ω—ã"""
        try:
            where_conditions = {}
            additional_filters = []
            
            if category_filter:
                additional_filters.append({"category": category_filter})
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —Ü–µ–Ω–µ
            if price_min is not None:
                additional_filters.append({"price": {"$gte": price_min}})
            if price_max is not None:
                additional_filters.append({"price": {"$lte": price_max}})
            
            if additional_filters:
                where_conditions = {"$and": additional_filters}
            
            search_params = {
                'query_texts': [query],
                'n_results': limit
            }
            
            if where_conditions:
                search_params['where'] = where_conditions
            
            results = self.all_products_collection.query(**search_params)
            
            return self._format_results(results, "üõçÔ∏è –í–°–ï –¢–û–í–ê–†–´")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            return []
    
    def combined_search(self, query, limit=5, price_min=None, price_max=None):
        """–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ - —Ü–≤–µ—Ç—ã + –¥—Ä—É–≥–∏–µ —Ç–æ–≤–∞—Ä—ã —Å —Ñ–∏–ª—å—Ç—Ä–æ–º —Ü–µ–Ω—ã"""
        flower_limit = max(1, limit // 2)
        other_limit = limit - flower_limit
        
        flowers = self.search_flowers_only(query, flower_limit, price_min, price_max)
        others = self.search_all_products(query, other_limit, price_min=price_min, price_max=price_max)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        all_results = flowers + others
        all_results.sort(key=lambda x: x.get('score', 0), reverse=True)
        
        return all_results[:limit]
    
    def _extract_price_from_query(self, query):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É/–±—é–¥–∂–µ—Ç –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        import re
        
        query_lower = query.lower()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã –Ω–∞ —Ä—É–º—ã–Ω—Å–∫–æ–º, —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        price_patterns = [
            # –†—É–º—ã–Ω—Å–∫–∏–π
            r'p√¢nƒÉ la (\d+)\s*(?:lei|mdl|md)',
            r'sub (\d+)\s*(?:lei|mdl|md)',
            r'mai ieftin de (\d+)\s*(?:lei|mdl|md)',
            r'buget(?:ul)?\s*(?:de|p√¢nƒÉ la)?\s*(\d+)\s*(?:lei|mdl|md)',
            r'maxim\s*(\d+)\s*(?:lei|mdl|md)',
            r'(\d+)\s*(?:lei|mdl|md)\s*maxim',
            
            # –†—É—Å—Å–∫–∏–π
            r'–¥–æ (\d+)\s*(?:–ª–µ–π|mdl|md)',
            r'–Ω–µ –±–æ–ª–µ–µ (\d+)\s*(?:–ª–µ–π|mdl|md)',
            r'–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö (\d+)\s*(?:–ª–µ–π|mdl|md)',
            r'–±—é–¥–∂–µ—Ç\s*(?:–¥–æ)?\s*(\d+)\s*(?:–ª–µ–π|mdl|md)',
            r'–º–∞–∫—Å–∏–º—É–º\s*(\d+)\s*(?:–ª–µ–π|mdl|md)',
            
            # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
            r'under (\d+)\s*(?:mdl|lei|md)',
            r'up to (\d+)\s*(?:mdl|lei|md)',
            r'max (\d+)\s*(?:mdl|lei|md)',
            r'budget\s*(?:of)?\s*(\d+)\s*(?:mdl|lei|md)',
            
            # –û–±—â–∏–µ —á–∏—Å–ª–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            r'(\d+)\s*(?:–ª–µ–π|lei|mdl|md)',
            r'(\d+)\s*maximum',
            r'(\d+)\s*max'
        ]
        
        for pattern in price_patterns:
            match = re.search(pattern, query_lower)
            if match:
                try:
                    price = int(match.group(1))
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã (–æ—Ç 10 –¥–æ 50000 MDL)
                    if 10 <= price <= 50000:
                        return price
                except (ValueError, IndexError):
                    continue
        
        return None
    
    def search_by_price_range(self, price_min, price_max, query="", limit=10, flowers_only=False):
        """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ü–µ–Ω–æ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ"""
        if flowers_only:
            return self.search_flowers_only(query or "flori frumoase", limit, price_min, price_max)
        else:
            return self.search_all_products(query or "cadou frumos", limit, price_min=price_min, price_max=price_max)
    
    def search_budget_flowers(self, budget, query="flori frumoase", limit=10):
        """–ü–æ–∏—Å–∫ —Ü–≤–µ—Ç–æ–≤ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –±—é–¥–∂–µ—Ç–µ"""
        print(f"üí∞ –ü–æ–∏—Å–∫ —Ü–≤–µ—Ç–æ–≤ –¥–æ {budget} MDL")
        return self.search_flowers_only(query, limit, price_max=budget)
    
    def search_budget_gifts(self, budget, query="cadou frumos", limit=10):
        """–ü–æ–∏—Å–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –±—é–¥–∂–µ—Ç–µ"""
        print(f"üéÅ –ü–æ–∏—Å–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–æ {budget} MDL")
        return self.search_all_products(query, limit, price_max=budget)
    
    def get_price_suggestions(self, query="", flowers_only=False):
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ü–µ–Ω–æ–≤—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        price_ranges = [
            {"name": "–ë—é–¥–∂–µ—Ç–Ω—ã–µ", "min": 0, "max": 500, "emoji": "üí∞"},
            {"name": "–°—Ä–µ–¥–Ω–∏–µ", "min": 500, "max": 1500, "emoji": "üíé"},
            {"name": "–ü—Ä–µ–º–∏—É–º", "min": 1500, "max": 3000, "emoji": "üëë"},
            {"name": "–õ—é–∫—Å", "min": 3000, "max": 10000, "emoji": "üíé‚ú®"}
        ]
        
        suggestions = []
        for price_range in price_ranges:
            products = self.search_by_price_range(
                price_range["min"], 
                price_range["max"], 
                query, 
                limit=3, 
                flowers_only=flowers_only
            )
            
            if products:
                suggestions.append({
                    "range": price_range,
                    "products": products,
                    "count": len(products)
                })
        
        return suggestions
    
    def _detect_search_type(self, query):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        query_lower = query.lower()
        
        flower_score = 0
        non_flower_score = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ü–≤–µ—Ç–æ–≤
        for lang, keywords in self.flower_keywords.items():
            for keyword in keywords:
                if keyword in query_lower:
                    flower_score += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –Ω–µ-—Ü–≤–µ—Ç–æ–≤
        for lang, keywords in self.non_flower_keywords.items():
            for keyword in keywords:
                if keyword in query_lower:
                    non_flower_score += 2  # –ë–æ–ª—å—à–∏–π –≤–µ—Å –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        
        if non_flower_score > flower_score:
            return "non_flowers"
        elif flower_score > 0:
            return "flowers"
        else:
            return "mixed"
    
    def _create_product_object(self, row, product_id):
        """–°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞"""
        return {
            'id': row.get('chunk_id', f'product_{product_id}'),
            'search_text': self._create_universal_search_text(row),
            'name': row.get('primary_text', '')[:150],
            'price': self._parse_price(row.get('price', '0')),
            'category': row.get('category', ''),
            'flowers': row.get('flower_type', ''),
            'url': self._get_best_url(row),
            'collection_id': row.get('collection_id', ''),
            'is_verified': row.get('is_verified', 'False'),
            'url_functional': row.get('url_functional', 'False'),
            'product_exists': row.get('product_exists', 'False')
        }
    
    def _create_universal_search_text(self, row):
        """–°–æ–∑–¥–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ–∫—Å—Ç"""
        parts = []
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        if row.get('primary_text'):
            parts.append(row['primary_text'])
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        if row.get('category'):
            parts.append(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {row['category']}")
        
        # –¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞
        if row.get('flower_type'):
            parts.append(f"–¢–∏–ø: {row['flower_type']}")
        
        # –¶–µ–Ω–∞
        price = self._parse_price(row.get('price', '0'))
        if price > 0:
            parts.append(f"–¶–µ–Ω–∞: {price} MDL")
        
        return " | ".join(parts)
    
    def _create_flower_search_text(self, row):
        """–°–æ–∑–¥–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ —Ü–≤–µ—Ç—ã"""
        parts = []
        
        if row.get('primary_text'):
            parts.append(row['primary_text'])
        
        # –¶–≤–µ—Ç–æ—á–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        flower_type = row.get('flower_type', '')
        if flower_type and 'Difuzor' not in flower_type:
            parts.append(f"–¶–≤–µ—Ç—ã: {flower_type}")
        
        category = row.get('category', '')
        if 'Bouquet' in category:
            parts.append("–ë—É–∫–µ—Ç —Ü–≤–µ—Ç–æ–≤ flori buchet")
        elif 'Rose' in category:
            parts.append("–†–æ–∑—ã trandafiri roses")
        elif 'Peonies' in category:
            parts.append("–ü–∏–æ–Ω—ã bujori peonies")
        
        price = self._parse_price(row.get('price', '0'))
        if price > 0:
            parts.append(f"–¶–µ–Ω–∞: {price} MDL")
        
        return " | ".join(parts)
    
    def _format_results(self, results, source_label):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞"""
        products = []
        if results['documents'][0]:
            for i in range(len(results['documents'][0])):
                metadata = results['metadatas'][0][i]
                
                product = {
                    'id': results['ids'][0][i],
                    'name': metadata['name'],
                    'price': metadata['price'],
                    'category': metadata['category'],
                    'flowers': metadata['flowers'],
                    'url': metadata['url'],
                    'score': round(1 - results['distances'][0][i], 3),
                    'text': results['documents'][0][i],
                    'is_verified': metadata.get('is_verified') == 'True',
                    'url_functional': metadata.get('url_functional') == 'True',
                    'source': source_label
                }
                products.append(product)
        
        products.sort(key=lambda x: x['score'], reverse=True)
        return products
    
    def _add_products_to_collection(self, products, collection, collection_name):
        """–î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é"""
        try:
            # –û—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
            self.client.delete_collection(collection_name)
            collection = self.client.create_collection(collection_name)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
            if collection_name == "flowers_only":
                self.flowers_collection = collection
            else:
                self.all_products_collection = collection
        except:
            pass
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        ids = [p['id'] for p in products]
        documents = [p['search_text'] for p in products]
        metadatas = [{
            'name': p['name'],
            'price': p['price'],
            'category': p['category'],
            'flowers': p['flowers'],
            'url': p['url'],
            'collection_id': p['collection_id'],
            'is_verified': p['is_verified'],
            'url_functional': p['url_functional'],
            'product_exists': p['product_exists'],
            'is_flower': p.get('is_flower', 'False')
        } for p in products]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ ChromaDB
        collection.add(
            documents=documents,
            metadatas=metadatas,
            ids=ids
        )
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é '{collection_name}'")
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (—Ç–µ –∂–µ —á—Ç–æ –∏ —Ä–∞–Ω—å—à–µ)
    def _is_valid_product(self, row):
        if row.get('product_exists', 'False') != 'True':
            return False
        if not row.get('primary_text', '').strip():
            return False
        price = self._parse_price(row.get('price', '0'))
        if price <= 0:
            return False
        return True
    
    def _get_best_url(self, row):
        if row.get('url_fixed') and row.get('url_fixed').strip():
            return row['url_fixed']
        elif row.get('url') and row.get('url').strip():
            return row['url']
        elif row.get('original_url') and row.get('original_url').strip():
            return row['original_url']
        else:
            return ""
    
    def _parse_price(self, price_str):
        if not price_str:
            return 0
        import re
        clean_price = re.sub(r'[^\d.]', '', str(price_str))
        try:
            return float(clean_price)
        except:
            return 0
    
    def get_stats(self):
        """–ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–±–µ–∏–º –∫–æ–ª–ª–µ–∫—Ü–∏—è–º (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
        try:
            all_results = self.all_products_collection.get()
            flower_results = self.flowers_collection.get()
            
            total_count = len(all_results['ids']) if all_results['ids'] else 0
            flower_count = len(flower_results['ids']) if flower_results['ids'] else 0
            
            verified_count = 0
            functional_count = 0
            categories = set()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            if all_results['metadatas']:
                for metadata in all_results['metadatas']:
                    if metadata.get('is_verified') == 'True':
                        verified_count += 1
                    if metadata.get('url_functional') == 'True':
                        functional_count += 1
                    if metadata.get('category'):
                        categories.add(metadata['category'])
            
            return {
                'total_products': total_count,
                'verified_products': verified_count,
                'functional_urls': functional_count,
                'categories_count': len(categories),
                'categories': sorted(list(categories)),
                'flower_products': flower_count,
                'collections': ['all_products', 'flowers_only']
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'error': str(e)}

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
universal_search = UniversalXOFlowersSearch()

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ü–µ–Ω—ã
def smart_search(query, limit=5, budget=None, price_min=None, price_max=None):
    """–£–º–Ω—ã–π –ø–æ–∏—Å–∫ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ü–µ–Ω—ã"""
    return universal_search.smart_search(query, limit, budget=budget, price_min=price_min, price_max=price_max)

def search_flowers_only(query, limit=5, budget=None, price_min=None, price_max=None):
    """–ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º —Ü–µ–Ω—ã"""
    return universal_search.search_flowers_only(query, limit, price_min, price_max or budget)

def search_all_products(query, limit=5, budget=None, price_min=None, price_max=None):
    """–ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º —Å —Ñ–∏–ª—å—Ç—Ä–æ–º —Ü–µ–Ω—ã"""
    return universal_search.search_all_products(query, limit, price_min=price_min, price_max=price_max or budget)

def search_gifts_and_accessories(query, limit=5, budget=None):
    """–ü–æ–∏—Å–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ —Å –±—é–¥–∂–µ—Ç–æ–º"""
    return universal_search.search_all_products(query, limit, price_max=budget)

def search_budget_flowers(budget, query="flori frumoase", limit=10):
    """–ü–æ–∏—Å–∫ —Ü–≤–µ—Ç–æ–≤ –≤ –±—é–¥–∂–µ—Ç–µ"""
    return universal_search.search_budget_flowers(budget, query, limit)

def search_budget_gifts(budget, query="cadou frumos", limit=10):
    """–ü–æ–∏—Å–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –±—é–¥–∂–µ—Ç–µ"""
    return universal_search.search_budget_gifts(budget, query, limit)

def search_by_price_range(price_min, price_max, query="", limit=10, flowers_only=False):
    """–ü–æ–∏—Å–∫ –≤ —Ü–µ–Ω–æ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ"""
    return universal_search.search_by_price_range(price_min, price_max, query, limit, flowers_only)

def get_price_suggestions(query="", flowers_only=False):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ü–µ–Ω–æ–≤—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    return universal_search.get_price_suggestions(query, flowers_only)

# –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
vector_search = universal_search

def search_flowers(query, limit=5, budget=None):
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±—é–¥–∂–µ—Ç–∞"""
    return universal_search.search_flowers_only(query, limit, price_max=budget)

def search_flowers_in_budget(query, max_price, limit=5):
    """–ü–æ–∏—Å–∫ —Ü–≤–µ—Ç–æ–≤ –≤ –±—é–¥–∂–µ—Ç–µ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
    return universal_search.search_budget_flowers(max_price, query, limit)
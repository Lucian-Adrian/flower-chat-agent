# –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –§–ê–ô–õ: src/database/vector_search.py
# –ó–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –Ω–∞ —ç—Ç–æ—Ç –∫–æ–¥

"""
–ü—Ä–æ—Å—Ç–æ–π –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è XOFlowers (–æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ CSV)
"""

import os
import csv
import chromadb
from sentence_transformers import SentenceTransformer

class SimpleVectorSearch:
    def __init__(self):
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ChromaDB
        self.client = chromadb.PersistentClient(path="./chroma_db")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–æ–≤
        self.model = SentenceTransformer('all-MiniLM-L6-v2')
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        try:
            self.collection = self.client.create_collection("products")
        except:
            self.collection = self.client.get_collection("products")
        
        print("‚úÖ –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –≥–æ—Ç–æ–≤!")
    
    def load_products_from_csv(self, csv_filename="final_products_case_standardized.csv"):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –Ω–æ–≤–æ–≥–æ CSV —Ñ–∞–π–ª–∞"""
        csv_path = f"data/{csv_filename}"
        
        if not os.path.exists(csv_path):
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∫–∞–∫ fallback
            csv_path = "data/chunks_data.csv"
            if not os.path.exists(csv_path):
                print("‚ùå –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                return
            print(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {csv_path}")
        else:
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {csv_path}")
        
        products = []
        total_rows = 0
        valid_products = 0
        
        with open(csv_path, 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            
            for row in reader:
                total_rows += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø—Ä–æ–¥—É–∫—Ç
                if row.get('chunk_type') != 'product':
                    continue
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
                if not self._is_valid_product(row):
                    continue
                
                valid_products += 1
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
                search_text = self._create_search_text(row)
                
                # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π URL
                best_url = self._get_best_url(row)
                
                product = {
                    'id': row.get('chunk_id', f'product_{valid_products}'),
                    'text': search_text,
                    'name': row.get('primary_text', '')[:100],
                    'price': self._parse_price(row.get('price', '0')),
                    'category': row.get('category', ''),
                    'flowers': row.get('flower_type', ''),
                    'url': best_url,
                    'collection_id': row.get('collection_id', ''),
                    'is_verified': row.get('is_verified', 'false'),
                    'url_functional': row.get('url_functional', 'false'),
                    'product_exists': row.get('product_exists', 'false')
                }
                
                products.append(product)
        
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {total_rows}")
        print(f"üå∏ –í–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {valid_products}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ ChromaDB
        if products:
            self._add_products_to_db(products)
        else:
            print("‚ùå –ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    
    def _is_valid_product(self, row):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        product_exists = str(row.get('product_exists', 'false')).lower()
        if product_exists == 'false':
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
        if not row.get('primary_text', '').strip():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ü–µ–Ω–∞
        price = row.get('price', '0')
        if not price or price == '0':
            return False
        
        return True
    
    def _create_search_text(self, row):
        """–°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞"""
        parts = []
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        if row.get('primary_text'):
            parts.append(row['primary_text'])
        
        # –¢–∏–ø —Ü–≤–µ—Ç–æ–≤
        if row.get('flower_type'):
            parts.append(row['flower_type'])
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        if row.get('category'):
            parts.append(row['category'])
        
        return ' | '.join(parts)
    
    def _get_best_url(self, row):
        """–í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π URL –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å URL
        url_functional = str(row.get('url_functional', 'false')).lower() == 'true'
        
        if url_functional and row.get('url'):
            return row['url']
        
        # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π URL –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º original_url
        if row.get('original_url'):
            return row['original_url']
        
        # Fallback –∫ –æ–±—ã—á–Ω–æ–º—É URL
        return row.get('url', '')
    
    def _parse_price(self, price_str):
        """–ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        if not price_str:
            return '0'
        
        # –ï—Å–ª–∏ —É–∂–µ —á–∏—Å–ª–æ
        try:
            float(price_str)
            return str(price_str)
        except:
            pass
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
        import re
        numbers = re.findall(r'\d+', str(price_str))
        if numbers:
            return numbers[0]
        
        return '0'
    
    def _add_products_to_db(self, products):
        """–î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.client.delete_collection("products")
            self.collection = self.client.create_collection("products")
        except:
            pass
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        ids = [p['id'] for p in products]
        documents = [p['text'] for p in products]
        metadatas = [{
            'name': p['name'],
            'price': p['price'],
            'category': p['category'],
            'flowers': p['flowers'],
            'url': p['url'],
            'collection_id': p['collection_id'],
            'is_verified': p['is_verified'],
            'url_functional': p['url_functional'],
            'product_exists': p['product_exists']
        } for p in products]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ ChromaDB
        self.collection.add(
            documents=documents,
            metadatas=metadatas,
            ids=ids
        )
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ ChromaDB!")
    
    def search(self, query, limit=5, only_verified=True, only_functional=True):
        """–ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
        try:
            # –°—Ç—Ä–æ–∏–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
            where_conditions = {}
            
            if only_verified:
                where_conditions["is_verified"] = "true"
            
            if only_functional:
                where_conditions["url_functional"] = "true"
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            search_params = {
                'query_texts': [query],
                'n_results': limit
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            if where_conditions:
                search_params['where'] = where_conditions
            
            results = self.collection.query(**search_params)
            
            products = []
            if results['documents'][0]:
                for i in range(len(results['documents'][0])):
                    product = {
                        'id': results['ids'][0][i],
                        'name': results['metadatas'][0][i]['name'],
                        'price': results['metadatas'][0][i]['price'],
                        'category': results['metadatas'][0][i]['category'],
                        'flowers': results['metadatas'][0][i]['flowers'],
                        'url': results['metadatas'][0][i]['url'],
                        'score': 1 - results['distances'][0][i],  # –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
                        'is_verified': results['metadatas'][0][i].get('is_verified', 'false'),
                        'url_functional': results['metadatas'][0][i].get('url_functional', 'false')
                    }
                    products.append(product)
            
            return products
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            # Fallback –ø–æ–∏—Å–∫ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            try:
                results = self.collection.query(
                    query_texts=[query],
                    n_results=limit
                )
                
                products = []
                if results['documents'][0]:
                    for i in range(len(results['documents'][0])):
                        product = {
                            'id': results['ids'][0][i],
                            'name': results['metadatas'][0][i]['name'],
                            'price': results['metadatas'][0][i]['price'],
                            'category': results['metadatas'][0][i]['category'],
                            'flowers': results['metadatas'][0][i]['flowers'],
                            'url': results['metadatas'][0][i]['url'],
                            'score': 1 - results['distances'][0][i]
                        }
                        products.append(product)
                
                return products
            except:
                return []
    
    def get_categories(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            all_results = self.collection.get()
            categories = set()
            
            for metadata in all_results['metadatas']:
                categories.add(metadata['category'])
            
            return sorted(list(categories))
        except:
            return []
    
    def get_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            all_results = self.collection.get()
            total_products = len(all_results['ids'])
            
            verified_count = 0
            functional_urls = 0
            categories = set()
            
            for metadata in all_results['metadatas']:
                if metadata.get('is_verified') == 'true':
                    verified_count += 1
                if metadata.get('url_functional') == 'true':
                    functional_urls += 1
                categories.add(metadata['category'])
            
            return {
                'total_products': total_products,
                'verified_products': verified_count,
                'functional_urls': functional_urls,
                'categories_count': len(categories),
                'categories': sorted(list(categories))
            }
        except Exception as e:
            return {'error': str(e)}

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–æ–∏—Å–∫–∞
vector_search = SimpleVectorSearch()
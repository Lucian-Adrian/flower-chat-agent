from setup_database import XoFlowersDB
import pandas as pd

def analyze_data_quality():
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –≤ CSV
    """
    print("üîç –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–•")
    print("=" * 40)
    
    df = pd.read_csv("data/chunks_data.csv")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
    
    for column in df.columns:
        null_count = df[column].isnull().sum()
        nan_count = (df[column].astype(str) == 'nan').sum()
        valid_count = len(df) - null_count - nan_count
        
        print(f"   {column}: {valid_count} –≤–∞–ª–∏–¥–Ω—ã—Ö / {null_count + nan_count} –ø—É—Å—Ç—ã—Ö")
    
    return df

def final_test():
    """
    –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
    """
    print("\nüå∏ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ XOFLOWERS CHROMADB")
    print("=" * 60)
    
    # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    df = analyze_data_quality()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print(f"\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    db = XoFlowersDB()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
    print(f"\n2Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç NaN)...")
    stats = db.load_products_from_csv("data/chunks_data.csv")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n3Ô∏è‚É£ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏:")
    total_loaded = sum(stats.values())
    success_rate = (total_loaded / len(df)) * 100
    
    print(f"   üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {total_loaded} –∏–∑ {len(df)} ({success_rate:.1f}%)")
    print(f"   üìä –ü—Ä–æ–ø—É—â–µ–Ω–æ: {len(df) - total_loaded} (–∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –¥–∞–Ω–Ω—ã—Ö)")
    
    for category, count in sorted(stats.items(), key=lambda x: x[1], reverse=True):
        percentage = (count / total_loaded * 100) if total_loaded > 0 else 0
        print(f"   üìÇ {category}: {count} —Ç–æ–≤–∞—Ä–æ–≤ ({percentage:.1f}%)")
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    print(f"\n4Ô∏è‚É£ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞:")
    
    test_cases = [
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ü–≤–µ—Ç–æ–≤
        {"query": "—Ä–æ–∑—ã –∫—Ä–∞—Å–Ω—ã–µ", "category": "flowers", "description": "–ü–æ–∏—Å–∫ —Ä–æ–∑"},
        {"query": "–±—É–∫–µ—Ç –Ω–µ–≤–µ—Å—Ç—ã", "category": "flowers", "description": "–°–≤–∞–¥–µ–±–Ω—ã–µ –±—É–∫–µ—Ç—ã"},
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
        {"query": "–ø–æ–¥–∞—Ä–æ–∫ –º–∞–º–µ", "category": None, "description": "–ü–æ–¥–∞—Ä–∫–∏"},
        {"query": "–º—è–≥–∫–∞—è –∏–≥—Ä—É—à–∫–∞", "category": "gifts", "description": "–ò–≥—Ä—É—à–∫–∏"},
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
        {"query": "–¥–∏—Ñ—Ñ—É–∑–æ—Ä –∞—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π", "category": "fragrance", "description": "–ê—Ä–æ–º–∞—Ç—ã"},
        {"query": "–≤–∞–∑–∞ –∫—Ä–∞—Å–∏–≤–∞—è", "category": "accessories", "description": "–í–∞–∑—ã"},
        
        # –¢–µ—Å—Ç —Å–µ–∑–æ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        {"query": "–¥–µ–Ω—å —Å–≤—è—Ç–æ–≥–æ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∞", "category": "seasonal", "description": "Valentine's Day"},
        
        # –¢–µ—Å—Ç –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç–∏
        {"query": "flori frumoase", "category": None, "description": "–†—É–º—ã–Ω—Å–∫–∏–π —è–∑—ã–∫"},
    ]
    
    for i, test in enumerate(test_cases, 1):
        print(f"\n   {i}. {test['description']}")
        print(f"      –ó–∞–ø—Ä–æ—Å: '{test['query']}'")
        
        results = db.search_products(
            test['query'], 
            category=test['category'], 
            n_results=3
        )
        
        if results:
            print(f"      ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
            for j, result in enumerate(results, 1):
                price = result['metadata'].get('price', 'N/A')
                category = result['metadata'].get('category', 'N/A')
                relevance = result['relevance']
                print(f"         {j}. {category} - {price} –ª–µ–π (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance:.3f})")
        else:
            print(f"      ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ —Ü–µ–Ω–µ –≤ —Ä–∞–∑–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö
    print(f"\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ —Ü–µ–Ω–µ:")
    
    price_ranges = [
        (0, 500, "–ë—é–¥–∂–µ—Ç–Ω—ã–µ"),
        (500, 1500, "–°—Ä–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç"), 
        (1500, 3000, "–ü—Ä–µ–º–∏—É–º"),
        (3000, 10000, "–õ—é–∫—Å")
    ]
    
    for min_price, max_price, segment in price_ranges:
        results = db.search_by_price(min_price, max_price)
        print(f"   üí∞ {segment} ({min_price}-{max_price} –ª–µ–π): {len(results)} —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n6Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    final_stats = db.get_stats()
    
    print(f"   üìä –í—Å–µ–≥–æ –≤ –±–∞–∑–µ: {final_stats['total']} —Ç–æ–≤–∞—Ä–æ–≤")
    print(f"   üìÅ –†–∞–∑–º–µ—Ä –±–∞–∑—ã: ./chroma_db/")
    
    for category, count in final_stats.items():
        if category != 'total' and count > 0:
            print(f"   üìÇ {category}: {count} –∑–∞–ø–∏—Å–µ–π")
    
    # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print(f"\n7Ô∏è‚É£ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    import time
    
    # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞
    start_time = time.time()
    for _ in range(10):
        db.search_products("—Ä–æ–∑—ã –∫—Ä–∞—Å–∏–≤—ã–µ", n_results=5)
    end_time = time.time()
    
    avg_time = (end_time - start_time) / 10
    print(f"   ‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {avg_time:.3f} —Å–µ–∫—É–Ω–¥")
    print(f"   ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {1/avg_time:.1f} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É")
    
    print(f"\nüéâ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
    print(f"üöÄ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞!")
    print(f"üìã –ì–æ—Ç–æ–≤–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–æ–º–∞–Ω–¥–æ–π –ø—Ä–æ–º–ø—Ç–∏–Ω–≥–∞!")
    
    return db, stats

if __name__ == "__main__":
    db, stats = final_test()
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–∏—Å–∫–∞ –ø–æ —Ü–µ–Ω–µ –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ XOFlowers
"""

import sys
sys.path.insert(0, 'src')

def test_price_extraction():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞"""
    print("üí∞ –¢–ï–°–¢ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –¶–ï–ù–´ –ò–ó –ó–ê–ü–†–û–°–ê")
    print("=" * 50)
    
    try:
        from database.vector_search import universal_search
        
        test_queries = [
            # –†—É–º—ã–Ω—Å–∫–∏–π
            ("vreau trandafiri p√¢nƒÉ la 800 lei", 800),
            ("buchet sub 500 mdl", 500),
            ("flori cu buget de 1200 lei", 1200),
            ("maxim 600 MDL", 600),
            
            # –†—É—Å—Å–∫–∏–π
            ("—Ü–≤–µ—Ç—ã –¥–æ 700 –ª–µ–π", 700),
            ("–±—É–∫–µ—Ç –Ω–µ –±–æ–ª–µ–µ 900 mdl", 900),
            ("–±—é–¥–∂–µ—Ç –¥–æ 1000 –ª–µ–π", 1000),
            ("–º–∞–∫—Å–∏–º—É–º 400 MDL", 400),
            
            # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
            ("flowers under 600 mdl", 600),
            ("bouquet up to 800 lei", 800),
            ("max 500 MDL", 500),
            
            # –ë–µ–∑ —Ü–µ–Ω—ã
            ("–∫—Ä–∞—Å–∏–≤—ã–µ —Ä–æ–∑—ã", None),
            ("trandafiri frumo»ôi", None)
        ]
        
        for query, expected_price in test_queries:
            extracted = universal_search._extract_price_from_query(query)
            status = "‚úÖ" if extracted == expected_price else "‚ùå"
            print(f"   {status} '{query}' ‚Üí {extracted} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected_price})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
        return False

def test_budget_search():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –≤ –±—é–¥–∂–µ—Ç–µ"""
    print(f"\nüí∞ –¢–ï–°–¢ –ü–û–ò–°–ö–ê –í –ë–Æ–î–ñ–ï–¢–ï")
    print("=" * 50)
    
    try:
        from database.vector_search import search_budget_flowers, search_budget_gifts, smart_search
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        from database.vector_search import universal_search
        universal_search.load_products_from_csv("final_products_case_standardized.csv")
        
        # –¢–µ—Å—Ç 1: –¶–≤–µ—Ç—ã –≤ –±—é–¥–∂–µ—Ç–µ –¥–æ 600 MDL
        print(f"\n1Ô∏è‚É£ –¶–≤–µ—Ç—ã –¥–æ 600 MDL:")
        budget_flowers = search_budget_flowers(600, "trandafiri frumo»ôi", limit=3)
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(budget_flowers)} —Ü–≤–µ—Ç–æ–≤")
        for i, product in enumerate(budget_flowers, 1):
            verified = "‚úÖ" if product.get('is_verified') else "‚ö†Ô∏è"
            print(f"   {i}. {verified} {product['name'][:50]}...")
            print(f"      üí∞ {product['price']} MDL | üìÇ {product['category']}")
        
        # –¢–µ—Å—Ç 2: –ü–æ–¥–∞—Ä–∫–∏ –≤ –±—é–¥–∂–µ—Ç–µ –¥–æ 300 MDL
        print(f"\n2Ô∏è‚É£ –ü–æ–¥–∞—Ä–∫–∏ –¥–æ 300 MDL:")
        budget_gifts = search_budget_gifts(300, "cadou frumos", limit=3)
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(budget_gifts)} –ø–æ–¥–∞—Ä–∫–æ–≤")
        for i, product in enumerate(budget_gifts, 1):
            print(f"   {i}. üéÅ {product['name'][:50]}...")
            print(f"      üí∞ {product['price']} MDL | üìÇ {product['category']}")
        
        # –¢–µ—Å—Ç 3: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞
        print(f"\n3Ô∏è‚É£ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞:")
        auto_budget = smart_search("flori frumoase p√¢nƒÉ la 800 lei", limit=3)
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(auto_budget)} —Ç–æ–≤–∞—Ä–æ–≤")
        for i, product in enumerate(auto_budget, 1):
            print(f"   {i}. üå∏ {product['name'][:50]}...")
            print(f"      üí∞ {product['price']} MDL | üìÇ {product['category']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –±—é–¥–∂–µ—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_price_range_search():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –≤ —Ü–µ–Ω–æ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ"""
    print(f"\nüíé –¢–ï–°–¢ –ü–û–ò–°–ö–ê –í –¶–ï–ù–û–í–û–ú –î–ò–ê–ü–ê–ó–û–ù–ï")
    print("=" * 50)
    
    try:
        from database.vector_search import search_by_price_range
        
        # –¢–µ—Å—Ç 1: –¶–≤–µ—Ç—ã –≤ —Å—Ä–µ–¥–Ω–µ–º —Ü–µ–Ω–æ–≤–æ–º —Å–µ–≥–º–µ–Ω—Ç–µ (500-1500 MDL)
        print(f"\n1Ô∏è‚É£ –¶–≤–µ—Ç—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 500-1500 MDL:")
        mid_range_flowers = search_by_price_range(500, 1500, "buchete frumoase", limit=4, flowers_only=True)
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(mid_range_flowers)} —Ü–≤–µ—Ç–æ–≤")
        for i, product in enumerate(mid_range_flowers, 1):
            print(f"   {i}. üå∏ {product['name'][:50]}...")
            print(f"      üí∞ {product['price']} MDL | üìÇ {product['category']}")
        
        # –¢–µ—Å—Ç 2: –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –ø—Ä–µ–º–∏—É–º —Å–µ–≥–º–µ–Ω—Ç–µ (2000-5000 MDL)
        print(f"\n2Ô∏è‚É£ –ü—Ä–µ–º–∏—É–º —Ç–æ–≤–∞—Ä—ã 2000-5000 MDL:")
        premium_products = search_by_price_range(2000, 5000, "premium luxury", limit=4, flowers_only=False)
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(premium_products)} —Ç–æ–≤–∞—Ä–æ–≤")
        for i, product in enumerate(premium_products, 1):
            print(f"   {i}. üëë {product['name'][:50]}...")
            print(f"      üí∞ {product['price']} MDL | üìÇ {product['category']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {e}")
        return False

def test_price_suggestions():
    """–¢–µ—Å—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ —Ü–µ–Ω–æ–≤—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    print(f"\nüéØ –¢–ï–°–¢ –¶–ï–ù–û–í–´–• –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô")
    print("=" * 50)
    
    try:
        from database.vector_search import get_price_suggestions
        
        # –¢–µ—Å—Ç 1: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ü–≤–µ—Ç–æ–≤
        print(f"\n1Ô∏è‚É£ –¶–µ–Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ü–≤–µ—Ç–æ–≤:")
        flower_suggestions = get_price_suggestions("trandafiri", flowers_only=True)
        
        for suggestion in flower_suggestions:
            range_info = suggestion["range"]
            count = suggestion["count"]
            print(f"   {range_info['emoji']} {range_info['name']} ({range_info['min']}-{range_info['max']} MDL): {count} —Ç–æ–≤–∞—Ä–æ–≤")
            
            if suggestion["products"]:
                example = suggestion["products"][0]
                print(f"      –ü—Ä–∏–º–µ—Ä: {example['name'][:40]}... - {example['price']} MDL")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
        print(f"\n2Ô∏è‚É£ –¶–µ–Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤:")
        all_suggestions = get_price_suggestions("cadou", flowers_only=False)
        
        for suggestion in all_suggestions:
            range_info = suggestion["range"]
            count = suggestion["count"]
            print(f"   {range_info['emoji']} {range_info['name']} ({range_info['min']}-{range_info['max']} MDL): {count} —Ç–æ–≤–∞—Ä–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
        return False

if __name__ == "__main__":
    print("üí∞ –ü–û–õ–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ü–û–ò–°–ö–ê –ü–û –¶–ï–ù–ï")
    print("=" * 60)
    
    tests = [
        ("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã", test_price_extraction),
        ("–ü–æ–∏—Å–∫ –≤ –±—é–¥–∂–µ—Ç–µ", test_budget_search),
        ("–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω", test_price_range_search),
        ("–¶–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", test_price_suggestions)
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        result = test_func()
        results.append((test_name, result))
    
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í –¶–ï–ù–´:")
    print("=" * 60)
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"{test_name:<25} {status}")
        if result:
            passed += 1
    
    print("-" * 60)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == len(results):
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –¶–ï–ù–´ –ü–†–û–®–õ–ò!")
        print("üí∞ –°–ò–°–¢–ï–ú–ê –ü–û–ò–°–ö–ê –ü–û –¶–ï–ù–ï –ì–û–¢–û–í–ê!")
        print("\nüí° –ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
        print("   üí∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞")
        print("   üîç –ü–æ–∏—Å–∫ –≤ —Ü–µ–Ω–æ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ")
        print("   üéØ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ü–µ–Ω–æ–≤—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        print("   üå∏ –¶–≤–µ—Ç—ã –≤ –±—é–¥–∂–µ—Ç–µ")
        print("   üéÅ –ü–æ–¥–∞—Ä–∫–∏ –≤ –±—é–¥–∂–µ—Ç–µ")
        print("\nüöÄ –ì–û–¢–û–í–û –ö –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –í –ë–û–¢–ê!")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
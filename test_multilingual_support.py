"""
Trilingual support test for ChromaDB system
Tests search functionality in English, Russian, and Romanian
"""

import sys
from pathlib import Path

# Add src to path
sys.path.append(str(Path(__file__).parent / "src"))

def test_multilingual_search():
    """Tests search in three languages"""
    print("üåç Trilingual ChromaDB Support Test")
    print("=" * 45)
    
    try:
        from database.chromadb_integration import smart_search, search_flowers_only, search_all_products
        
        # Test queries in three languages
        test_cases = [
            # Romanian language
            {
                "language": "Romanian üá≤üá©",
                "queries": [
                    ("trandafiri ro»ôii", "red roses"),
                    ("buchet pentru nuntƒÉ", "wedding bouquet"),
                    ("cadou frumos", "beautiful gift"),
                    ("flori pentru mama", "flowers for mom"),
                    ("aranjament floral", "floral arrangement")
                ]
            },
            # Russian language  
            {
                "language": "Russian üá∑üá∫",
                "queries": [
                    ("–∫—Ä–∞—Å–Ω—ã–µ —Ä–æ–∑—ã", "red roses"),
                    ("—Å–≤–∞–¥–µ–±–Ω—ã–π –±—É–∫–µ—Ç", "wedding bouquet"),
                    ("–∫—Ä–∞—Å–∏–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫", "beautiful gift"),
                    ("—Ü–≤–µ—Ç—ã –¥–ª—è –º–∞–º—ã", "flowers for mom"),
                    ("–ø–∏–æ–Ω—ã —Ä–æ–∑–æ–≤—ã–µ", "pink peonies")
                ]
            },
            # English language
            {
                "language": "English üá¨üáß",
                "queries": [
                    ("red roses", "–∫—Ä–∞—Å–Ω—ã–µ —Ä–æ–∑—ã"),
                    ("wedding bouquet", "—Å–≤–∞–¥–µ–±–Ω—ã–π –±—É–∫–µ—Ç"), 
                    ("beautiful gift", "–∫—Ä–∞—Å–∏–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫"),
                    ("flowers for mom", "—Ü–≤–µ—Ç—ã –¥–ª—è –º–∞–º—ã"),
                    ("premium arrangement", "–ø—Ä–µ–º–∏—É–º –∫–æ–º–ø–æ–∑–∏—Ü–∏—è")
                ]
            }
        ]
        
        total_tests = 0
        successful_tests = 0
        
        for language_test in test_cases:
            language = language_test["language"]
            queries = language_test["queries"]
            
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {language}")
            print("-" * 30)
            
            for query, description in queries:
                total_tests += 1
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–º–Ω—ã–π –ø–æ–∏—Å–∫
                results = smart_search(query, limit=3)
                
                if results:
                    successful_tests += 1
                    status = "‚úÖ"
                    result_count = len(results)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    first_result = results[0]
                    price = first_result.get('price', 0)
                    category = first_result.get('category', 'N/A')
                    
                    print(f"   {status} \"{query}\" ({description})")
                    print(f"      üìä –ù–∞–π–¥–µ–Ω–æ: {result_count} —Ç–æ–≤–∞—Ä–æ–≤")
                    print(f"      üèÜ –¢–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {price} MDL | {category}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
                    similarity = first_result.get('similarity_score', 0)
                    if similarity > 0.3:  # –ü–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                        print(f"      ‚≠ê –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {similarity:.2f} (–æ—Ç–ª–∏—á–Ω–æ)")
                    else:
                        print(f"      ‚ö†Ô∏è –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {similarity:.2f} (–Ω–∏–∑–∫–∞—è)")
                else:
                    status = "‚ùå"
                    print(f"   {status} \"{query}\" ({description})")
                    print(f"      üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        success_rate = (successful_tests / total_tests) * 100
        print(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}/{total_tests}")
        print(f"   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        if success_rate >= 80:
            print(f"   üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ")
        elif success_rate >= 60:
            print(f"   üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –ï—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π")
        else:
            print(f"   ‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
        
        return success_rate >= 70
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ChromaDB —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def test_specific_language_features():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞"""
    print("\nüî¨ –¢–µ—Å—Ç —è–∑—ã–∫–æ–≤—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π")
    print("=" * 30)
    
    try:
        from database.chromadb_integration import search_flowers_only, search_all_products
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã
        specific_tests = [
            # –†—É–º—ã–Ω—Å–∫–∏–µ –¥–∏–∞–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–∫–∏
            ("flori frumoa»ôe", "—Ü–≤–µ—Ç—ã —Å –¥–∏–∞–∫—Ä–∏—Ç–∏–∫–∞–º–∏", "—Ä—É–º—ã–Ω—Å–∫–∏–π"),
            ("trandafiri ro»ôii", "—Ä–æ–∑—ã —Å »ô", "—Ä—É–º—ã–Ω—Å–∫–∏–π"),
            
            # –†—É—Å—Å–∫–∏–µ –ø–∞–¥–µ–∂–∏
            ("–±—É–∫–µ—Ç–∞ —Ä–æ–∑", "–±—É–∫–µ—Ç –≤ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ", "—Ä—É—Å—Å–∫–∏–π"),
            ("—Ü–≤–µ—Ç–∞–º–∏ –∫—Ä–∞—Å–∏–≤—ã–º–∏", "—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂", "—Ä—É—Å—Å–∫–∏–π"),
            
            # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–∏–Ω–æ–Ω–∏–º—ã  
            ("flower arrangement", "–∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–∏–Ω–æ–Ω–∏–º—ã", "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π"),
            ("floral composition", "—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π", "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π")
        ]
        
        print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è–∑—ã–∫–æ–≤—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π:")
        
        for query, description, language in specific_tests:
            results = search_flowers_only(query, limit=2)
            
            if results:
                status = "‚úÖ"
                count = len(results)
            else:
                status = "‚ö†Ô∏è"
                count = 0
            
            print(f"   {status} {language}: \"{query}\" ({description}) - {count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —è–∑—ã–∫–æ–≤—ã—Ö —Ç–µ—Å—Ç–∞—Ö: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ Multilingual ChromaDB Test Suite")
    print("===================================")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    main_test_passed = test_multilingual_search()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    feature_test_passed = test_specific_language_features()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüèÅ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    if main_test_passed and feature_test_passed:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –¢—Ä–µ—Ö—ä—è–∑—ã—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º, —Ä—É—Å—Å–∫–∏–º –∏ —Ä—É–º—ã–Ω—Å–∫–∏–º —è–∑—ã–∫–∞–º–∏")
    elif main_test_passed:
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã, –µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è")
        print("üëç –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ç—Ä–µ—Ö—ä—è–∑—ã—á–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã")

if __name__ == "__main__":
    main()

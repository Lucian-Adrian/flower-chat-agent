#!/usr/bin/env python3
"""
Test budget filtering functionality
"""

import sys
import os
sys.path.insert(0, 'src')

def test_budget_filtering():
    """Test budget extraction and filtering"""
    print("üí∞ Testing Budget Filtering...")
    
    try:
        from intelligence.conversation_manager import get_conversation_manager
        cm = get_conversation_manager()
        
        # Test cases with different budget formats
        test_cases = [
            ("–Ω—É–∂–Ω—ã —Ü–≤–µ—Ç—ã –¥–ª—è –º–∞–º—ã –¥–æ 1000 –ª–µ–π", 1000),
            ("—Ö–æ—á—É –±—É–∫–µ—Ç –ø–æ–¥ 500 –ª–µ–π", 500),
            ("flowers under 800 lei", 800),
            ("bouquet sub 300 MDL", 300),
            ("trandafiri maximum 1200", 1200),
            ("roses max 600", 600),
            ("flori –Ω–µ –±–æ–ª–µ–µ 900 –ª–µ–π", 900),
            ("buchete nu mai mult de 750", 750),
        ]
        
        print("\nüß™ Testing budget extraction...")
        for message, expected_budget in test_cases:
            extracted = cm._extract_budget(message)
            status = "‚úÖ" if extracted == expected_budget else "‚ùå"
            print(f"   {status} '{message}' ‚Üí {extracted} (expected {expected_budget})")
        
        print("\nüß™ Testing real search with budget...")
        test_searches = [
            "—Ü–≤–µ—Ç—ã –¥–ª—è –º–∞–º—ã –¥–æ 500 –ª–µ–π",
            "–±—É–∫–µ—Ç –ø–æ–¥ 1000 –ª–µ–π", 
            "trandafiri –¥–æ 800",
        ]
        
        for search_query in test_searches:
            print(f"\nüîç Testing: '{search_query}'")
            response = cm.process_message_sync("test_user_budget", search_query)
            
            # Check if response mentions budget
            if "bugetul" in response or "budget" in response or "MDL" in response:
                print("   ‚úÖ Budget mentioned in response")
            else:
                print("   ‚ö†Ô∏è Budget not mentioned in response")
                
            # Extract prices from response for verification
            import re
            prices = re.findall(r'(\d+\.?\d*)\s*MDL', response)
            if prices:
                max_price = max(float(p) for p in prices)
                budget = cm._extract_budget(search_query)
                if budget and max_price <= budget:
                    print(f"   ‚úÖ All prices ({max_price} max) within budget ({budget})")
                else:
                    print(f"   ‚ùå Price {max_price} exceeds budget {budget}")
            
        print("\nüéâ Budget filtering test completed!")
        return True
        
    except Exception as e:
        print(f"‚ùå Error in budget test: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    test_budget_filtering()

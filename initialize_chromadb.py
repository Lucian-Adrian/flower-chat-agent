"""
ChromaDB initialization script for XOFlowers products
Creates and populates embedding database
"""

import sys
import os
import traceback
from pathlib import Path

# Add src to path
sys.path.append(str(Path(__file__).parent / "src"))

def main():
    """Main initialization function"""
    print("üöÄ Initializing ChromaDB for XOFlowers")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–∏
        from database.chromadb_manager import (
            initialize_database, 
            get_database_stats,
            search_flowers,
            search_all_products
        )
        
        print("üì¶ –ú–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        result = initialize_database(recreate=True)
        
        if not result.get('success'):
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {result.get('error')}")
            return False
        
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞")
        print(f"   üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {result['total_products']}")
        print(f"   ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö: {result['valid_products']}")
        print(f"   üå∏ –§–ª–æ—Ä–∞–ª—å–Ω—ã—Ö: {result['floral_products']}")
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        stats = get_database_stats()
        
        if 'error' not in stats:
            print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π:")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–≤–µ—Ç–æ–≤
            flowers_stats = stats.get('flowers_collection', {})
            print(f"   üå∏ –ö–æ–ª–ª–µ–∫—Ü–∏—è —Ü–≤–µ—Ç–æ–≤:")
            print(f"      - –ü—Ä–æ–¥—É–∫—Ç–æ–≤: {flowers_stats.get('total_products', 0)}")
            print(f"      - –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {flowers_stats.get('categories_count', 0)}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            all_stats = stats.get('all_products_collection', {})
            print(f"   üõçÔ∏è –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã:")
            print(f"      - –ü—Ä–æ–¥—É–∫—Ç–æ–≤: {all_stats.get('total_products', 0)}")
            print(f"      - –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {all_stats.get('categories_count', 0)}")
            
            # –¶–µ–Ω–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
            price_range = all_stats.get('price_range', {})
            if price_range:
                print(f"   üí∞ –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {price_range.get('min', 0):.0f} - {price_range.get('max', 0):.0f} MDL")
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories = all_stats.get('categories', [])
            if categories:
                print(f"\nüìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ({len(categories)}):")
                for i, category in enumerate(categories, 1):
                    print(f"   {i:2d}. {category}")
        
        # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞...")
        
        test_queries = [
            ("—Ç–∞–Ω–¥–∞—Ñ–∏—Ä–∏ —Ä–æ»ôii", "–ü–æ–∏—Å–∫ –∫—Ä–∞—Å–Ω—ã—Ö —Ä–æ–∑"),
            ("cadou frumos", "–ü–æ–∏—Å–∫ –∫—Ä–∞—Å–∏–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤"), 
            ("buchet pentru nuntƒÉ", "–°–≤–∞–¥–µ–±–Ω—ã–π –±—É–∫–µ—Ç"),
            ("difuzor aromƒÉ", "–ê—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–∏—Ñ—Ñ—É–∑–æ—Ä"),
            ("peonii roz", "–†–æ–∑–æ–≤—ã–µ –ø–∏–æ–Ω—ã")
        ]
        
        for query, description in test_queries:
            print(f"\n   üîç {description} ({query}):")
            
            # –ü–æ–∏—Å–∫ –≤ —Ü–≤–µ—Ç–∞—Ö
            flower_results = search_flowers(query, limit=2)
            print(f"      üå∏ –¶–≤–µ—Ç—ã: {len(flower_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            for result in flower_results:
                price = result.get('price', 0)
                category = result.get('category', 'N/A')
                verified = "‚úÖ" if result.get('is_verified') else "‚ö†Ô∏è"
                name = result.get('name', '')[:60] + "..." if len(result.get('name', '')) > 60 else result.get('name', '')
                print(f"         {verified} {name}")
                print(f"             üí∞ {price} MDL | üìÇ {category}")
            
            # –ü–æ–∏—Å–∫ –≤–æ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
            all_results = search_all_products(query, limit=2)
            print(f"      üõçÔ∏è –í—Å–µ —Ç–æ–≤–∞—Ä—ã: {len(all_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            for result in all_results:
                price = result.get('price', 0)
                category = result.get('category', 'N/A')
                verified = "‚úÖ" if result.get('is_verified') else "‚ö†Ô∏è"
                name = result.get('name', '')[:60] + "..." if len(result.get('name', '')) > 60 else result.get('name', '')
                print(f"         {verified} {name}")
                print(f"             üí∞ {price} MDL | üìÇ {category}")
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ —Ü–µ–Ω—ã
        print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ —Ü–µ–Ω—ã...")
        
        budget_tests = [
            (500, "–ë—é–¥–∂–µ—Ç –¥–æ 500 MDL"),
            (1000, "–ë—é–¥–∂–µ—Ç –¥–æ 1000 MDL"),
            (2000, "–ë—é–¥–∂–µ—Ç –¥–æ 2000 MDL")
        ]
        
        for budget, description in budget_tests:
            print(f"\n   üí∞ {description}:")
            results = search_all_products("cadou frumos", limit=3, price_max=budget)
            print(f"      –ù–∞–π–¥–µ–Ω–æ: {len(results)} —Ç–æ–≤–∞—Ä–æ–≤")
            for result in results:
                price = result.get('price', 0)
                category = result.get('category', 'N/A')
                name = result.get('name', '')[:50] + "..." if len(result.get('name', '')) > 50 else result.get('name', '')
                print(f"         üí∞ {price} MDL | üìÇ {category} | {name}")
        
        print("\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChromaDB –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
        print("   - search_flowers(query, limit, price_min, price_max)")
        print("   - search_all_products(query, limit, price_min, price_max)")
        print("   - get_database_stats()")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        print("   pip install chromadb sentence-transformers")
        return False
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        return False

def test_search_functions():
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("\nüß™ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    try:
        from database.chromadb_manager import search_flowers, search_all_products
        
        # –¢–µ—Å—Ç –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç–∏ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π, —Ä—É—Å—Å–∫–∏–π, —Ä—É–º—ã–Ω—Å–∫–∏–π)
        multilingual_tests = [
            ("roses", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"),
            ("trandafiri", "–†—É–º—ã–Ω—Å–∫–∏–π"),
            ("—Ä–æ–∑—ã", "–†—É—Å—Å–∫–∏–π")
        ]
        
        print("\n   üåç –¢–µ—Å—Ç –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç–∏:")
        for query, language in multilingual_tests:
            results = search_flowers(query, limit=1)
            status = "‚úÖ" if results else "‚ùå"
            print(f"      {status} {language} ({query}): {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ —Ü–µ–Ω–æ–≤—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º
        print("\n   üí∞ –¢–µ—Å—Ç —Ü–µ–Ω–æ–≤—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤:")
        price_ranges = [
            (0, 500, "–≠–∫–æ–Ω–æ–º"),
            (500, 1500, "–°—Ä–µ–¥–Ω–∏–π"),
            (1500, 5000, "–ü—Ä–µ–º–∏—É–º"),
            (5000, None, "–õ—é–∫—Å")
        ]
        
        for price_min, price_max, segment in price_ranges:
            results = search_all_products("–±—É–∫–µ—Ç", limit=1, price_min=price_min, price_max=price_max)
            status = "‚úÖ" if results else "‚ùå"
            range_str = f"{price_min}-{price_max if price_max else '‚àû'}"
            print(f"      {status} {segment} ({range_str} MDL): {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö: {e}")
        return False

if __name__ == "__main__":
    print("ChromaDB Product Database Initializer")
    print("====================================")
    
    success = main()
    
    if success:
        test_search_functions()
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
    else:
        print("\n‚ùå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
        sys.exit(1)

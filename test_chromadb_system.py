"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç ChromaDB —Å–∏—Å—Ç–µ–º—ã
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import os
import csv
import sys
from pathlib import Path

def test_csv_reading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —á—Ç–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    print("üìÅ –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è CSV —Ñ–∞–π–ª–∞...")
    
    csv_file = Path("data/final_products_case_standardized.csv")
    
    if not csv_file.exists():
        print(f"‚ùå CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_file}")
        return False
    
    try:
        categories = set()
        total_products = 0
        valid_products = 0
        
        with open(csv_file, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            
            for row in reader:
                total_products += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                if row.get('chunk_id') and row.get('primary_text') and row.get('category') and row.get('price'):
                    valid_products += 1
                    categories.add(row['category'])
        
        print(f"‚úÖ CSV —Ñ–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω:")
        print(f"   üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {total_products}")
        print(f"   ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {valid_products}")
        print(f"   üìÇ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
        
        print(f"\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        for i, category in enumerate(sorted(categories), 1):
            print(f"   {i:2d}. {category}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}")
        return False

def test_config_files():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    config_files = [
        "config/chromadb_settings.py",
        "src/database/chromadb_manager.py",
        "src/database/chromadb_integration.py",
        "initialize_chromadb.py"
    ]
    
    all_exist = True
    
    for file_path in config_files:
        path = Path(file_path)
        if path.exists():
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_exist = False
    
    return all_exist

def create_minimal_test():
    """–°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüß™ –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
    try:
        sys.path.append(str(Path.cwd()))
        from config.chromadb_settings import (
            PRODUCT_CATEGORIES, FLORAL_CATEGORIES, 
            EMBEDDING_MODEL, get_csv_file
        )
        
        print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
        print(f"   üîß –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {EMBEDDING_MODEL}")
        print(f"   üìÇ –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(PRODUCT_CATEGORIES)}")
        print(f"   üå∏ –§–ª–æ—Ä–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(FLORAL_CATEGORIES)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª CSV
        csv_path = get_csv_file()
        print(f"   üìÅ CSV —Ñ–∞–π–ª: {csv_path}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ: {e}")
        return False

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    dependencies = {
        'chromadb': 'ChromaDB –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
        'sentence_transformers': 'Sentence Transformers –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤',
        'torch': 'PyTorch –¥–ª—è –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π',
        'numpy': 'NumPy –¥–ª—è —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π'
    }
    
    available = {}
    
    for dep, description in dependencies.items():
        try:
            __import__(dep)
            print(f"‚úÖ {dep} - {description}")
            available[dep] = True
        except ImportError:
            print(f"‚ùå {dep} - {description} (–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
            available[dep] = False
    
    return available

def generate_installation_instructions():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:")
    print("=" * 50)
    
    print("1. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:")
    print("   .\\venv\\Scripts\\Activate.ps1")
    
    print("\n2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
    print("   pip install -r requirements.txt")
    
    print("\n3. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã):")
    print("   pip install chromadb sentence-transformers torch numpy")
    
    print("\n4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:")
    print("   python initialize_chromadb.py")
    
    print("\n5. –î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π:")
    print("   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ src/database/chromadb_integration.py")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ ChromaDB System Test")
    print("=" * 30)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    os.chdir(Path(__file__).parent)
    
    tests_passed = 0
    total_tests = 0
    
    # –¢–µ—Å—Ç 1: –ß—Ç–µ–Ω–∏–µ CSV
    total_tests += 1
    if test_csv_reading():
        tests_passed += 1
    
    # –¢–µ—Å—Ç 2: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    total_tests += 1
    if test_config_files():
        tests_passed += 1
    
    # –¢–µ—Å—Ç 3: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
    total_tests += 1
    if create_minimal_test():
        tests_passed += 1
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    available_deps = check_dependencies()
    dependencies_ready = all(available_deps.values())
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {tests_passed}/{total_tests}")
    print(f"   üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤—ã: {'–î–∞' if dependencies_ready else '–ù–µ—Ç'}")
    
    if tests_passed == total_tests and dependencies_ready:
        print("\nüéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python initialize_chromadb.py")
    elif tests_passed == total_tests:
        print("\n‚ö†Ô∏è –§–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã, –Ω–æ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        generate_installation_instructions()
    else:
        print("\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–∞–π–ª–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤")

if __name__ == "__main__":
    main()

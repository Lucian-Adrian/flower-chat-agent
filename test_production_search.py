"""
–¢–µ—Å—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ XOFlowers
"""

import sys
sys.path.insert(0, 'src')

def test_universal_search():
    print("üåç –¢–ï–°–¢ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ –ü–û–ò–°–ö–ê")
    print("=" * 50)
    
    try:
        from database.vector_search import universal_search, smart_search, search_flowers_only, search_all_products
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        universal_search.load_products_from_csv("final_products_case_standardized.csv")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´:")
        stats = universal_search.get_stats()
        if 'error' not in stats:
            print(f"   üõçÔ∏è –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {stats.get('total_products', 0)}")
            print(f"   üå∏ –ò–∑ –Ω–∏—Ö —Ü–≤–µ—Ç–æ–≤: {stats.get('flower_products', 0)}")
            print(f"   üì¶ –ö–æ–ª–ª–µ–∫—Ü–∏–∏: {', '.join(stats.get('collections', []))}")
        
        print(f"\nüß† –¢–ï–°–¢ –£–ú–ù–û–ì–û –ü–û–ò–°–ö–ê:")
        print("=" * 40)
        
        # –¢–µ—Å—Ç 1: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ü–≤–µ—Ç–æ–≤
        print(f"\n1Ô∏è‚É£ –£–º–Ω—ã–π –ø–æ–∏—Å–∫ '–±—É–∫–µ—Ç—ã —Ä–æ–∑ trandafiri':")
        smart_roses = smart_search("–±—É–∫–µ—Ç—ã —Ä–æ–∑ trandafiri", limit=3)
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(smart_roses)} —Ç–æ–≤–∞—Ä–æ–≤")
        for i, product in enumerate(smart_roses, 1):
            verified = "‚úÖ" if product.get('is_verified') else "‚ö†Ô∏è"
            print(f"   {i}. {verified} [{product.get('source', 'N/A')}] {product['name'][:50]}...")
            print(f"      üí∞ {product['price']} MDL | üìÇ {product['category']}")
            print(f"      üéØ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {product['score']}")
        
        # –¢–µ—Å—Ç 2: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –¥–∏—Ñ—Ñ—É–∑–æ—Ä–æ–≤
        print(f"\n2Ô∏è‚É£ –£–º–Ω—ã–π –ø–æ–∏—Å–∫ '–¥–∏—Ñ—Ñ—É–∑–æ—Ä—ã –∞—Ä–æ–º–∞—Ç—ã chando':")
        smart_diffusers = smart_search("–¥–∏—Ñ—Ñ—É–∑–æ—Ä—ã –∞—Ä–æ–º–∞—Ç—ã chando", limit=3)
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(smart_diffusers)} —Ç–æ–≤–∞—Ä–æ–≤")
        for i, product in enumerate(smart_diffusers, 1):
            verified = "‚úÖ" if product.get('is_verified') else "‚ö†Ô∏è"
            print(f"   {i}. {verified} [{product.get('source', 'N/A')}] {product['name'][:50]}...")
            print(f"      üí∞ {product['price']} MDL | üìÇ {product['category']}")
        
        # –¢–µ—Å—Ç 3: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç–æ–≤
        print(f"\n3Ô∏è‚É£ –¢–æ–ª—å–∫–æ –¶–í–ï–¢–´ '–∫—Ä–∞—Å–∏–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏':")
        flowers_only = search_flowers_only("–∫—Ä–∞—Å–∏–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏", limit=3)
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(flowers_only)} —Ç–æ–≤–∞—Ä–æ–≤")
        for i, product in enumerate(flowers_only, 1):
            print(f"   {i}. üå∏ {product['name'][:50]}...")
            print(f"      üí∞ {product['price']} MDL | üìÇ {product['category']}")
        
        # –¢–µ—Å—Ç 4: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º
        print(f"\n4Ô∏è‚É£ –í–°–ï –¢–û–í–ê–†–´ '–ø–æ–¥–∞—Ä–∫–∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã':")
        all_products = search_all_products("–ø–æ–¥–∞—Ä–∫–∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã", limit=3)
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(all_products)} —Ç–æ–≤–∞—Ä–æ–≤")
        for i, product in enumerate(all_products, 1):
            print(f"   {i}. üõçÔ∏è {product['name'][:50]}...")
            print(f"      üí∞ {product['price']} MDL | üìÇ {product['category']}")
        
        # –¢–µ—Å—Ç 5: –ü–æ–∏—Å–∫ –∏–≥—Ä—É—à–µ–∫
        print(f"\n5Ô∏è‚É£ –£–º–Ω—ã–π –ø–æ–∏—Å–∫ '–º—è–≥–∫–∏–µ –∏–≥—Ä—É—à–∫–∏ toys':")
        smart_toys = smart_search("–º—è–≥–∫–∏–µ –∏–≥—Ä—É—à–∫–∏ toys", limit=3)
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(smart_toys)} —Ç–æ–≤–∞—Ä–æ–≤")
        for i, product in enumerate(smart_toys, 1):
            print(f"   {i}. üß∏ [{product.get('source', 'N/A')}] {product['name'][:50]}...")
            print(f"      üí∞ {product['price']} MDL | üìÇ {product['category']}")
        
        # –¢–µ—Å—Ç 6: –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        print(f"\n6Ô∏è‚É£ –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ '–ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è':")
        mixed_search = smart_search("–ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", limit=4)
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {len(mixed_search)} —Ç–æ–≤–∞—Ä–æ–≤")
        for i, product in enumerate(mixed_search, 1):
            print(f"   {i}. üéÅ [{product.get('source', 'N/A')}] {product['name'][:50]}...")
            print(f"      üí∞ {product['price']} MDL | üìÇ {product['category']}")
        
        print(f"\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ì–û –ü–û–ò–°–ö–ê –£–°–ü–ï–®–ù–´!")
        print(f"üéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_category_detection():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    print(f"\nüéØ –¢–ï–°–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –¢–ò–ü–ê –ü–û–ò–°–ö–ê:")
    print("=" * 50)
    
    try:
        from database.vector_search import universal_search
        
        test_queries = [
            ("—Ä–æ–∑—ã –±—É–∫–µ—Ç trandafiri", "flowers"),
            ("–¥–∏—Ñ—Ñ—É–∑–æ—Ä –∞—Ä–æ–º–∞—Ç chando", "non_flowers"), 
            ("–∏–≥—Ä—É—à–∫–∏ –º—è–≥–∫–∏–µ toys", "non_flowers"),
            ("–ø–æ–¥–∞—Ä–æ–∫ –∫—Ä–∞—Å–∏–≤—ã–π", "mixed"),
            ("—Å–≤–∞–¥—å–±–∞ –Ω–µ–≤–µ—Å—Ç–∞ bride", "flowers"),
            ("–æ—Ç–∫—Ä—ã—Ç–∫–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ", "non_flowers")
        ]
        
        for query, expected in test_queries:
            detected = universal_search._detect_search_type(query)
            status = "‚úÖ" if detected == expected else "‚ùå"
            print(f"   {status} '{query}' ‚Üí {detected} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    print("üåç –ü–û–õ–ù–´–ô –¢–ï–°–¢ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    success1 = test_universal_search()
    success2 = test_category_detection()
    
    print(f"\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("=" * 50)
    
    if success1 and success2:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò!")
        print("‚úÖ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢!")
        print("üöÄ –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ –í –ü–†–û–î–ê–ö–®–ï–ù–ï!")
        print("\nüí° –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´:")
        print("   üß† –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞")
        print("   üå∏ –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç–æ–≤")
        print("   üõçÔ∏è –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º") 
        print("   üéÅ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫")
        print("   üí∞ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ü–µ–Ω–µ –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")